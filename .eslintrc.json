{
  "env": {
    "browser": true,
    "amd": true,
    "es6": true,
    "node": true
  },

  "parser": "babel-eslint",

  "parserOptions": {
    "sourceType": "module",
    "ecmaVersion": 6,
    "ecmaFeatures": {
      "jsx": true,
      "experimentalObjectRestSpread": true
    }
  },

  "plugins": [
    "react",
    "import"
  ],

  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:import/errors",
    "plugin:import/warnings"
  ],

  "rules": {
    //Possible Errors
    //The following rules point out areas where you might have made mistakes.

    "no-extra-parens": [2, "all", {
      "nestedBinaryExpressions": false
    }], //disallow unnecessary parentheses
    "valid-jsdoc": [2], //Ensure JSDoc comments are valid

    //Best Practices
    //These are rules designed to prevent you from making mistakes. They either prescribe a better way of doing something or help you avoid footguns.

    "accessor-pairs": [0], //Enforces getter/setter pairs in objects
    "array-callback-return": [0], //Enforces return statements in callbacks of array's methods
    "block-scoped-var": [2], //treat var statements as if they were block scoped
    "complexity": [0], //specify the maximum cyclomatic complexity allowed in a program
    "consistent-return": [2], //require return statements to either always or never specify values
    "curly": [2], //specify curly brace conventions for all control statements
    "default-case": [2], //require default case in switch statements
    "dot-notation": [2], //encourages use of dot notation whenever possible
    "dot-location": [2, "property"], //enforces consistent newlines before or after dots
    "eqeqeq": [2, "smart"], //require the use of === and !== (fixable)
    "guard-for-in": [0], //make sure for-in loops have an if statement
    "no-alert": [2], //disallow the use of alert, confirm, and prompt
    "no-caller": [2], //disallow use of arguments.caller or arguments.callee
    "no-div-regex": [2], //disallow division operators explicitly at beginning of regular expression
    "no-else-return": [0], //disallow else after a return in an if
    "no-empty-function": [2], //disallow use of empty functions
    "no-eq-null": [0], //disallow comparisons to null without a type-checking operator
    "no-eval": [2], //disallow use of eval()
    "no-extend-native": [2], //disallow adding to native types
    "no-extra-bind": [2], //disallow unnecessary function binding
    "no-extra-label": [2], //disallow unnecessary labels
    "no-floating-decimal": [2], //disallow the use of leading or trailing decimal points in numeric literals
    "no-implicit-coercion": [0], //disallow the type conversions with shorter notations
    "no-implicit-globals": [2], //disallow var and named functions in global scope
    "no-implied-eval": [2], //disallow use of eval()-like methods
    "no-invalid-this": [2], //disallow this keywords outside of classes or class-like objects
    "no-iterator": [2], //disallow usage of __iterator__ property
    "no-labels": [2], //disallow use of labeled statements
    "no-lone-blocks": [2], //disallow unnecessary nested blocks
    "no-loop-func": [2], //disallow creation of functions within loops
    "no-magic-numbers": [0], //disallow the use of magic numbers
    "no-multi-spaces": [0], //disallow use of multiple spaces
    "no-multi-str": [2], //disallow use of multiline strings
    "no-new": [0], //disallow use of the new operator when not part of an assignment or comparison
    "no-new-func": [2], //disallow use of new operator for Function object
    "no-new-wrappers": [2], //disallows creating new instances of String,Number, and Boolean
    "no-octal-escape": [2], //disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-param-reassign": [2], //disallow reassignment of function parameters
    "no-proto": [2], //disallow usage of __proto__ property
    "no-return-assign": [2], //disallow use of assignment in return statement
    "no-script-url": [2], //disallow use of javascript urls.
    "no-self-compare": [1], //disallow comparisons where both sides are exactly the same
    "no-sequences": [2], //disallow use of the comma operator
    "no-throw-literal": [2], //restrict what can be thrown as an exception
    "no-unmodified-loop-condition": [2], //disallow unmodified conditions of loops
    "no-unused-expressions": [2], //disallow usage of expressions in statement position
    "no-useless-call": [2], //disallow unnecessary .call() and .apply()
    "no-useless-concat": [2], //disallow unnecessary concatenation of literals or template literals
    "no-useless-escape": [2], //disallow unnecessary escape characters
    "no-void": [0], //disallow use of the void operator
    "no-warning-comments": [0], //disallow usage of configurable warning terms in comments //e.g. TODO or FIXME
    "no-with": [0], //disallow use of the with statement
    "radix": [0], //require use of the second argument for parseInt()
    "vars-on-top": [0], //require declaration of all vars at the top of their containing scope
    "wrap-iife": [2, "inside"], //require immediate function invocation to be wrapped in parentheses
    "yoda": [2], //require or disallow Yoda conditions

    //Strict Mode
    //These rules relate to using strict mode.

    "strict": [0], //controls location of Use Strict Directives

    //Variables
    //These rules have to do with variable declarations.

    "init-declarations": [0], //enforce or disallow variable initializations at definition
    "no-catch-shadow": [2], //disallow the catch clause parameter name being the same as a variable in the outer scope
    "no-label-var": [2], //disallow labels that share a name with a variable
    "no-restricted-globals": [0], //disallow specified global variables
    "no-shadow": [2], //disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": [2], //disallow shadowing of names such as arguments
    "no-undef-init": [2], //disallow use of undefined when initializing variables
    "no-undefined": [0], //disallow use of undefined variable
    "no-use-before-define": [2], //disallow use of variables before they are defined

    //Node.js and CommonJS
    //These rules are specific to JavaScript running on Node.js or using CommonJS in the browser.

    "callback-return": [1], //enforce return after a callback
    "global-require": [1], //disallow require() outside of the top-level module scope
    "handle-callback-err": [1], //enforce error handling in callbacks
    "no-mixed-requires": [1], //disallow mixing regular variable and require declarations
    "no-new-require": [1], //disallow use of new operator with the require function
    "no-path-concat": [1], //disallow string concatenation with __dirname and __filename
    "no-process-env": [2], //disallow use of process.env
    "no-process-exit": [1], //disallow process.exit()
    "no-restricted-modules": [1], //restrict usage of specified node modules
    "no-sync": [1], //disallow use of synchronous methods

    //Stylistic Issues
    //These rules are purely matters of style and are quite subjective.

    "array-bracket-spacing": [2, "never"], //enforce spacing inside array brackets
    "block-spacing": [2, "always"], //disallow or enforce spaces inside of single line blocks
    "brace-style": [2], //enforce one true brace style
    "camelcase": [2], //require camel case names
    "comma-spacing": [2], //enforce spacing before and after comma
    "comma-style": [2], //enforce one true comma style
    "computed-property-spacing": [2], //require or disallow padding inside computed properties
    "consistent-this": [2, "self"], //enforce consistent naming when capturing the current execution context
    "eol-last": [2], //enforce newline at the end of file, with no multiple empty lines
    "func-names": [0], //require function expressions to have a name
    "func-style": [0], //enforce use of function declarations or expressions
    "id-blacklist": [2], //blacklist certain identifiers to prevent them being used
    "id-length": [0], //this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
    "id-match": [0], //require identifiers to match the provided regular expression
    "indent": [2, 2], //specify tab or space width for your code
    "jsx-quotes": [2, "prefer-double"], //specify whether double or single quotes should be used in JSX attributes
    "key-spacing": [2], //enforce spacing between keys and values in object literal properties
    "keyword-spacing": [2], //enforce spacing before and after keywords
    "linebreak-style": [0], //disallow mixed 'LF' and 'CRLF' as linebreaks
    "lines-around-comment": [0], //enforce empty lines around comments
    "max-depth": [0], //enforce a maximum depth that blocks can be nested
    "max-len": [0], //enforce a maximum line length
    "max-lines": [0], //enforce a maximum depth that callbacks can be nested
    "max-nested-callbacks": [0], //enforce a maximum depth that callbacks can be nested
    "max-params": [0], //enforce a maximum number of parameters in function definitions
    "max-statements": [0], //enforce a maximum number of statements allowed in function blocks
    "max-statements-per-line": [0, {
      "max": 2
    }], //enforce a maximum number of statements allowed per line
    "new-cap": [2], //require a capital letter for constructors
    "new-parens": [2], //disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var": [2], //require or disallow an empty newline after variable declarations
    "newline-before-return": [2], //require an empty line before return statements
    "newline-per-chained-call": [0], //enforce newline after each call when chaining the calls
    "no-array-constructor": [2], //disallow use of the Array constructor
    "no-bitwise": [2], //disallow bitwise operators
    "no-continue": [2], //disallow use of the continue statement
    "no-inline-comments": [0], //disallow comments inline after code
    "no-lonely-if": [2], //disallow if as the only statement in an else block
    "no-mixed-operators": [2], //disallow mixes of different operators
    "no-multiple-empty-lines": [2], //disallow multiple empty lines
    "no-nested-ternary": [2], //disallow nested ternary expressions
    "no-negated-condition": [2], //disallow negated conditions
    "no-new-object": [2], //disallow the use of the Object constructor
    "no-plusplus": [0], //disallow the unary operators ++ and --
    "no-restricted-syntax": [2], //disallow use of certain syntax in code
    "no-spaced-func": [2], //disallow space between function identifier and application
    "no-tabs": [2], //Disallow tabs in file
    "no-ternary": [0], //disallow the use of ternary operators
    "no-trailing-spaces": [2], //disallow trailing whitespace at the end of lines
    "no-underscore-dangle": [0], //disallow dangling underscores in identifiers
    "no-unneeded-ternary": [2], //disallow the use of ternary operators when a simpler alternative exists
    "no-whitespace-before-property": [2], //disallow whitespace before properties
    "object-curly-newline": [0], //require or disallow line breaks inside braces
    "object-curly-spacing": [0], //require or disallow padding inside curly braces
    "object-property-newline": [2, {
      "allowMultiplePropertiesPerLine": true
    }], //enforce placing object properties on separate lines
    "one-var": [0], //require or disallow one variable declaration per function
    "one-var-declaration-per-line": [2, "always"], //require or disallow an newline around variable declarations
    "operator-assignment": [0], //require assignment operator shorthand where possible or prohibit it entirely
    "operator-linebreak": [2, "after"], //enforce operators to be placed before or after line breaks
    "padded-blocks": [0], //enforce padding within blocks
    "quote-props": [0], //require quotes around object literal property names
    "quotes": [2, "single"], //specify whether backticks, double or single quotes should be used (fixable)
    "require-jsdoc": [0], //Require JSDoc comment
    "semi-spacing": [2], //enforce spacing before and after semicolons
    "sort-imports": [0], //sort import declarations within module
    "semi": [2, "always"], //require or disallow use of semicolons instead of ASI (fixable)
    "sort-vars": [0], //sort variables within the same declaration block
    "space-before-blocks": [2], //require or disallow a space before blocks
    "space-before-function-paren": [0], //require or disallow a space before function opening parenthesis
    "space-in-parens": [0], //require or disallow spaces inside parentheses
    "space-infix-ops": [2], //require spaces around operators
    "space-unary-ops": [2], //require or disallow spaces before/after unary operators
    "spaced-comment": [0], //require or disallow a space immediately following the // or /* in a comment
    "wrap-regex": [2], //require regex literals to be wrapped in parentheses


    //ECMAScript 6
    //These rules are only relevant to ES6 environments.

    "arrow-body-style": [0], //require braces in arrow function body
    "arrow-parens": [2], //require parens in arrow function arguments
    "arrow-spacing": [2], //require space before/after arrow function's arrow
    "generator-star-spacing": [2], //enforce spacing around the * in generator functions
    "no-confusing-arrow": [2], //disallow arrow functions where they could be confused with comparisons
    "no-duplicate-imports": [2], //disallow duplicate module imports
    "no-restricted-imports": [0], //restrict usage of specified node imports
    "no-useless-computed-key": [2], //disallow unnecessary computed property keys in object literals
    "no-useless-constructor": [2], //disallow unnecessary constructor
    "no-useless-rename": [2], //Disallow renaming import, export, and destructured assignments to the same name
    "no-var": [2], //require let or const instead of var
    "object-shorthand": [2], //require method and property shorthand syntax for object literals
    "prefer-arrow-callback": [2], //suggest using arrow functions as callbacks
    "prefer-const": [2], //suggest using const declaration for variables that are never modified after declared
    "prefer-reflect": [0], //suggest using Reflect methods where applicable
    "prefer-rest-params": [2], //suggest using the rest parameters instead of arguments
    "prefer-spread": [2], //suggest using the spread operator instead of .apply().
    "prefer-template": [2], //suggest using template literals instead of strings concatenation
    "rest-spread-spacing": [2], //Enforce spacing between rest and spread operators and their expressions
    "sort-imports": [0], //Import Sorting
    "template-curly-spacing": [2], //enforce spacing around embedded expressions of template strings
    "yield-star-spacing": [2, "both"], //enforce spacing around the * in yield* expressions

    //Reat

    "react/prop-types": [0],

    //Import

    "import/no-unresolved": [2, {"amd": true}]
  },

  "settings": {
    "import/resolver": "webpack"
  }
}
